#version 150

in vec4 MCvertex;
in vec3 MCnormal;
in vec3 MCtexCoord;

out vec2 tCoord;

uniform mat4 MVMatrix;
uniform mat4 PMatrix;

uniform sampler2D height_map; 

const float sample_dist = 0.02;
uniform float height_distortion_intensity;

void main() {
	tCoord = MCtexCoord.xy;
	
	if (height_distortion_intensity != 0) {
		float xmin = tCoord.x - sample_dist;
		if (xmin < 0) {
			xmin += 1.0;
		}
		
		float xplus = tCoord.x + sample_dist;
		if (xplus > 1) {
			xplus -= 1.0;
		}
		
		float ymin = tCoord.y - sample_dist;
		if (ymin < 0) {
			ymin += 1.0;
		}
		
		float yplus = tCoord.y + sample_dist;
		if (yplus > 1) {
			yplus -= 1.0;
		}
		
		float xn = 1.5 * height_distortion_intensity * length(texture(height_map, vec2(xmin, tCoord.y)).rgb);
		float xp = 1.5 * height_distortion_intensity * length(texture(height_map, vec2(xplus, tCoord.y)).rgb);
		float yn = 1.5 * height_distortion_intensity * length(texture(height_map, vec2(tCoord.x, ymin)).rgb);
		float yp = 1.5 * height_distortion_intensity * length(texture(height_map, vec2(tCoord.x, yplus)).rgb);
		
		float self = 4 * height_distortion_intensity * length(texture(height_map, tCoord).rgb);
			
		float offset = (1.0 - height_distortion_intensity*20) + (self + xn + xp + yn + yp);
		
		gl_Position = PMatrix * MVMatrix * vec4(MCvertex.xyz * offset, MCvertex.w);
	} else {
		gl_Position = PMatrix * MVMatrix * MCvertex;
	}
} 
